{"version":3,"sources":["Nav.js","UserList.js","Users.js","UserDetails.js","App.js","serviceWorker.js","index.js"],"names":["Nav","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","style","marginLeft","to","textDecoration","UserList","props","backgroundColor","List","ListItem","ListItemAvatar","Avatar","src","user","name","alt","id","key","Divider","component","Users","state","users","Axios","get","then","res","setState","data","console","log","this","map","userIter","Component","UserDetails","match","params","Card","maxWidth","CardContent","gutterBottom","username","email","InputLabel","htmlFor","Select","MenuItem","address","street","city","zipcode","phone","website","CardActions","Button","size","Home","App","className","path","exact","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oPAkCeA,MAvBf,WACI,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACrB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQC,MAAM,UAAUC,aAAW,QAClD,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAO,CAACC,WAAW,QAC5C,kBAAC,IAAD,CAAMC,GAAI,IAAIF,MAAO,CAACG,eAAe,OAAQP,MAAM,UACnD,sCAGA,kBAACE,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAO,CAACC,WAAW,QAC5C,kBAAC,IAAD,CAAMC,GAAI,SAASF,MAAO,CAACG,eAAe,OAAOP,MAAM,UACvD,2C,8DCOKQ,EAjBE,SAACC,GACd,OACI,yBAAKL,MAAO,CAACM,gBAAgB,YAC7B,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,IAAG,sCAAiCN,EAAMO,KAAKC,MAAQC,IAAI,UACjE,kBAAC,IAAD,QAGJ,kBAAC,IAAD,CAAMd,MAAO,CAACG,eAAe,QAAUD,GAAI,SAAWG,EAAMO,KAAKG,GAAIC,IAAKX,EAAMO,KAAKG,IAAKV,EAAMO,KAAKC,OAEvG,kBAACI,EAAA,EAAD,CAASlB,QAAQ,QAAQmB,UAAU,U,yDCE5BC,E,2MAzBXC,MAAQ,CACJC,MAAO,I,mFAGS,IAAD,OACfC,IAAMC,IAAN,8CACCC,MAAK,SAAAC,GACF,EAAKC,SAAS,CAACL,MAAOI,EAAIE,Y,+BAK9B,OADAC,QAAQC,IAAI,QAEZC,KAAKV,MAAMC,MAAMU,KAAI,SAACC,GAClB,OAAO,kBAAC,EAAD,CAAUhB,IAAOgB,EAASjB,GAAIH,KAAQoB,W,GAfrCC,a,+DC8DLC,E,2MApDXd,MAAQ,CACJR,KAAO,M,mFAGS,IAAD,OACfU,IAAMC,IAAN,qDAAwDO,KAAKzB,MAAM8B,MAAMC,OAAOrB,KAC/ES,MAAK,SAAAC,GACF,EAAKC,SAAS,CAACd,KAAMa,EAAIE,Y,+BAI7B,OAAuB,OAApBG,KAAKV,MAAMR,KACH,aAGP,yBAAKZ,MAAO,CAACM,gBAAgB,YACzC,gCAAQ,kBAAC+B,EAAA,EAAD,CAAMtC,QAAQ,WAAWC,MAAO,CAACsC,SAAS,IAAIhC,gBAAgB,SAChE,kBAACiC,EAAA,EAAD,KACE,kBAACzC,EAAA,EAAD,CAAYF,MAAM,gBAAgB4C,cAAY,GAC9C,yBAAK7B,IAAG,sCAAiCmB,KAAKV,MAAMR,KAAKC,MAAQC,IAAI,YAErE,kBAAChB,EAAA,EAAD,CAAYF,MAAM,iBACfkC,KAAKV,MAAMR,KAAKC,KADnB,MAC4BiB,KAAKV,MAAMR,KAAK6B,SAD5C,KAGA,kBAAC3C,EAAA,EAAD,CAAYC,QAAQ,QAAQmB,UAAU,KACnCY,KAAKV,MAAMR,KAAK8B,OACN,6BACb,kBAAC5C,EAAA,EAAD,CAAYF,MAAM,iBAClB,kBAAC+C,EAAA,EAAD,CAAYC,QAAQ,kBAApB,WACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,iBAAoBhB,KAAKV,MAAMR,KAAKmC,QAAQC,QAC5C,kBAACF,EAAA,EAAD,eAAkBhB,KAAKV,MAAMR,KAAKmC,QAAQE,MACpC,kBAACH,EAAA,EAAD,kBAAqBhB,KAAKV,MAAMR,KAAKmC,QAAQG,WAExC,6BACb,kBAACpD,EAAA,EAAD,CAAYF,MAAM,iBACfkC,KAAKV,MAAMR,KAAKuC,OAEnB,kBAACrD,EAAA,EAAD,CAAYF,MAAM,iBACfkC,KAAKV,MAAMR,KAAKwC,UAGrB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,SAAb,sB,GA5CkBtB,aCW1B,IAAMuB,EAAO,kBACX,6BACE,2CAIWC,EAtBf,WACE,OAEE,kBAAC,IAAD,KACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAAC1C,UAAWsC,IACjC,kBAAC,IAAD,CAAOG,KAAK,SAASzC,UAAWC,IAChC,kBAAC,IAAD,CAAOwC,KAAK,YAAYE,OAAQ,SAAAxD,GAAK,OAAI,kBAAC,EAAgBA,UCL9CyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS9B,MACvB,2DCXN+B,IAASL,OAAO,kBAAC,EAAD,MAASM,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,MAAK,SAAAgD,GACjCA,EAAaC,iB","file":"static/js/main.ca45f0ef.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport './App.css';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nfunction Nav () {\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" style={{marginLeft:'10%'}}>\r\n          <Link to ='/' style={{textDecoration:'none' ,color:'white'}} >\r\n          <h3 >Home</h3>\r\n           </Link>\r\n          </Typography>\r\n          <Typography variant=\"h6\" style={{marginLeft:'10%'}}>\r\n          <Link to ='/users' style={{textDecoration:'none',color:'white'}}>\r\n          <h3>Users</h3>\r\n            </Link>\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n        </div>\r\n    )\r\n}\r\nexport default Nav;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport WorkIcon from '@material-ui/icons/Work';\r\nimport BeachAccessIcon from '@material-ui/icons/BeachAccess';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { Tooltip } from '@material-ui/core';\r\n\r\n\r\n\r\nconst UserList = (props) =>{\r\n    return ( \r\n        <div style={{backgroundColor:'#8FBC8F'}}> \r\n        <List>\r\n        <ListItem>\r\n          <ListItemAvatar>\r\n            <Avatar src={`https://joeschmoe.io/api/v1/${props.user.name}`} alt=\"Avatar\">\r\n              <ImageIcon />\r\n            </Avatar>\r\n          </ListItemAvatar>\r\n          <Link style={{textDecoration:'none'}}  to={\"/user/\" + props.user.id} key={props.user.id}>{props.user.name}</Link>\r\n        </ListItem>\r\n        <Divider variant=\"inset\" component=\"li\" />\r\n        </List>  \r\n    </div>\r\n    )\r\n} \r\nexport default UserList;","import React, { Component } from 'react';\r\nimport Axios from 'axios';\r\nimport UserList from './UserList';\r\n\r\nclass Users extends Component{\r\n    state = {\r\n        users: [],\r\n    };\r\n\r\n    componentDidMount(){\r\n        Axios.get(`https://jsonplaceholder.typicode.com/users`)\r\n        .then(res => {\r\n            this.setState({users: res.data});\r\n        });\r\n    }\r\n    render(){\r\n        console.log('some')\r\n        return(\r\n        this.state.users.map((userIter) => {\r\n            return <UserList key = {userIter.id} user = {userIter} />\r\n        }))\r\n       \r\n        // return (\r\n        //     <div>\r\n        //         {userList}\r\n        //     </div>\r\n        // )\r\n\r\n    }\r\n}\r\nexport default Users;","import React,{ Component} from 'react';\r\nimport Axios from 'axios';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\n\r\nclass UserDetails extends Component{\r\n    state = {\r\n        user : null\r\n    };\r\n\r\n    componentDidMount(){\r\n        Axios.get(`https://jsonplaceholder.typicode.com/users/${this.props.match.params.id}`)\r\n        .then(res => {\r\n            this.setState({user: res.data});\r\n        });\r\n    }\r\n    render(){\r\n        if(this.state.user === null){\r\n            return 'loading...'\r\n        }\r\n        return (\r\n            <div style={{backgroundColor:'#FFFACD'}}>\r\n<center><Card variant=\"outlined\" style={{maxWidth:275,backgroundColor:'cyan'}} >\r\n      <CardContent>\r\n        <Typography color=\"textSecondary\" gutterBottom>\r\n        <img src={`https://joeschmoe.io/api/v1/${this.state.user.name}`} alt=\"Avatar\"></img>\r\n        </Typography>\r\n        <Typography color=\"textSecondary\">\r\n          {this.state.user.name} ( {this.state.user.username})\r\n        </Typography>\r\n        <Typography variant=\"body2\" component=\"p\">\r\n          {this.state.user.email}\r\n        </Typography><br />\r\n        <Typography color=\"textSecondary\">\r\n        <InputLabel htmlFor=\"grouped-select\">Address</InputLabel>\r\n        <Select>\r\n          <MenuItem>Street - {this.state.user.address.street}</MenuItem>\r\n          <MenuItem>City - {this.state.user.address.city}</MenuItem>\r\n                <MenuItem>Zipcode - {this.state.user.address.zipcode}</MenuItem>\r\n        </Select>\r\n        </Typography><br />\r\n        <Typography color=\"textSecondary\">\r\n          {this.state.user.phone}\r\n        </Typography>\r\n        <Typography color=\"textSecondary\">\r\n          {this.state.user.website}\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        <Button size=\"small\">Learn More</Button>\r\n      </CardActions>\r\n    </Card>\r\n    </center>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\nexport default UserDetails;","import React from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Nav from './Nav';\nimport UserList from './UserList';\nimport Users from './Users';\nimport UserDetails from './UserDetails';\n\nfunction App() {\n  return (\n    \n    <Router>\n      <div className=\"App\">\n        <Nav />\n        <Switch>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/users\" component={Users} />\n        <Route path=\"/user/:id\" render={props => <UserDetails {...props} />} />\n        </Switch>\n       \n      </div>\n    </Router>\n  );\n}\nconst Home = () => (\n  <div>\n    <h1>Home Page</h1>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Users from './Users';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}